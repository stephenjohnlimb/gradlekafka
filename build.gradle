plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.1'
    id 'com.google.cloud.tools.jib' version '3.2.1'
    id "org.unbroken-dome.helm" version "1.7.0"
}

group 'com.tinker'
version '1.0-SNAPSHOT'

ext {
    //Default of where we will push the resulting jib generated docker image.
    targetDockerRepository = "192.168.64.2:32000"
}

tasks.register('configureDockerRepository') {
    doLast {
        println "Would reconfigure repository url based on some values"
    }
}

tasks.register('deployLocal') {
    //Just an example of how to create a bespoke task and chain a few other tasks together
    dependsOn('configureDockerRepository', tasks.getByName("jib"))
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jib {
    allowInsecureRegistries = true
    from {
        image = 'openjdk:17-jdk-alpine'
    }

    to {
        //Double quotes important here like bash shell, single quotes are literal
        //but double quotes allow variable expansion.
        image = "${targetDockerRepository}/${rootProject.name}:${version}"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:2.7.1')
    implementation 'org.springframework.boot:spring-boot-starter'

    //Actuator is for the metrics
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //This is for the additional output for prometheus - see application.properties for details.
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //We need at least and index controller to kicking the port 8080 stuff and get the actuator running.
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //Specific kafka stuff
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-clients:3.2.0'

    //Just for our testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}
