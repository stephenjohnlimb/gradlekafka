plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.1'
    id 'com.google.cloud.tools.jib' version '3.2.1'
    id "org.unbroken-dome.helm" version "1.7.0"
}

group 'com.tinker'
//This will be used as the version of the application in helm i.e. appVersion
version '1.0.0'

ext {
    //Default of where we will push the resulting jib generated docker image.
    pushDockerRepository = "192.168.64.2:32000"
    //This is where the helm deployment in K8s will pull image from.
    pullDockerRepository = "localhost:32000"
    helmChartVersion = '1.0.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jib {
    allowInsecureRegistries = true
    from {
        image = 'openjdk:17-jdk-alpine'
    }

    to {
        //Double quotes important here like bash shell, single quotes are literal
        //but double quotes allow variable expansion.
        image = "${project.pushDockerRepository}/${rootProject.name}:${version}"
    }
}

// Use the helm plug in to also build and populate the helm chart parts
//i.e. yes template the template - but only for a few items.
helm {
    filtering {
        //But this is where K8s should pull the image from
        values.put 'imageRepository', project.pullDockerRepository
        values.put 'imageTag', version
        values.put 'projectName', rootProject.name
        values.put 'helmChartVersion', project.helmChartVersion
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:2.7.1')
    implementation 'org.springframework.boot:spring-boot-starter'

    //Actuator is for the metrics
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //This is for the additional output for prometheus - see application.properties for details.
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //We need at least and index controller to kicking the port 8080 stuff and get the actuator running.
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //Specific kafka stuff
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-clients:3.2.0'

    //Just for our testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}
